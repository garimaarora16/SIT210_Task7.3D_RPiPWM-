# Documentation
# Name- Garima Arora
# Roll No.- 2110994761
# Task- 7.3D

# ----------------------------------------


# importing the libraries
# imported RPi.Gpio from the GPIO Library
import RPi.GPIO as GPIO

# imported the time library
import time

# Pin 12,18 and 24 used for the led, trigger and echo respectively
LED_PIN = 12
GPIO_TRIGGER = 18
GPIO_ECHO = 24


# initial values for distance, starting time and stop time is zero.
distance = 0
Starting_time = 0
Stop_Time = 0

# GPIO Mode- GPIO Pin number
GPIO.setmode(GPIO.BOARD)

# GPIO warning set to be false
GPIO.setwarnings(False)

# all these funstions are set for the led and sensors to produce the inputs and outputs
GPIO.setup(LED_PIN, GPIO.OUT)
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)

# Setting the pwm for LED mins max value(100)
pwm = GPIO.PWM(LED_PIN, 100)
pwm.start(0)

try:
    while True:
        # Trigger settinh to HIGH(0)
        GPIO.output(GPIO_TRIGGER, 0)
        # Delay
        time.sleep(0.000002)

        # Trigger settinh to LOW(1)
        GPIO.output(GPIO_TRIGGER, 1)
        # Delay
        time.sleep(0.00001)

        # this is for saving the time of arrival
        while GPIO.input(GPIO_ECHO) == 0:
            # This is for calculating the start time
            Starting_time = time.time()
        while not GPIO.input(GPIO_ECHO) == 0:
            # this is for calculating the end time
            Stop_Time = time.time()

        # Time difference between the start and the arrival
        Time_Period = Stop_Time - Starting_time

        # Sonic speed(34300 cm/s) is multiplied and division with 2 because of there and back
        distance = (Time_Period*34300)/2

        # calculating distance and displaying on the terminal
        print("Distance: " + str(distance))

        # controlling the analogue pin of the LED
        if distance <= 20 and distance > 0:
            pwm.ChangeDutyCycle(((20 - distance)/30) * 100)
        else:
            pwm.ChangeDutyCycle(0)

        # delay of one second
        time.sleep(0.5)

except KeyboardInterrupt:
    pwm.stop()  # PWM signal is stopped at the respective channel
    GPIO.cleanup()  # cleaning up all the ports
